---
import fs from "node:fs";
import { minify } from "terser";
import buildScript from "./script.js";

export interface props {
  beautify: boolean;
  cache: boolean;
  containerSelector: string;
  defaultAnimation: boolean;
  delay: number;
  external: boolean;
  forceRequestIdleCallback: boolean;
  highPriorityPrefetch: boolean;
  ignores: string[];
  limit: number;
  localLinkDetector: boolean;
  PPBColor: string;
  prefetch: boolean;
  prefetchUpgradation: boolean;
  progressBar: boolean;
  root: string;
  rootMargin: string;
  secondaryProgressBar: boolean;
  SPBColor: string;
  threshold: number;
  timeout: number | false;
}

const {
  beautify = false,
  cache = true,
  containerSelector = "",
  defaultAnimation = true,
  delay = 500,
  external = false,
  forceRequestIdleCallback = false,
  highPriorityPrefetch = false,
  ignores = [],
  limit = 0,
  localLinkDetector = true,
  PPBColor = "#42b3f5",
  prefetch = true,
  prefetchUpgradation = true,
  progressBar = true,
  root = "",
  rootMargin = "",
  secondaryProgressBar = false,
  SPBColor = "#4248f5",
  threshold = 0.25,
  timeout = 2000,
} = Astro.props as props;

const scriptContent = buildScript(
  cache,
  containerSelector,
  defaultAnimation,
  delay,
  forceRequestIdleCallback,
  highPriorityPrefetch,
  ignores,
  limit,
  localLinkDetector,
  PPBColor,
  prefetch,
  prefetchUpgradation,
  progressBar,
  root,
  rootMargin,
  secondaryProgressBar,
  SPBColor,
  threshold,
  timeout,
);

const { code } = await minify(scriptContent, { format : { beautify } });

external && fs.writeFileSync("public/spa.js", code);
---

{external ? <script src={Astro.resolve("/spa.js")}></script> : `<script>${code}</script>`}